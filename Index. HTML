<!DOCTYPE html>
<html lang="hi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>рк╕рлНркЯрлБркбрлЗркирлНркЯ рк╕рк╛ркерлА - AI ркирлЛркВркз рк╕рк░рк│ ркХрк░ркирк╛рк░</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Segoe UI', sans-serif; }
        body { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }
        .container { max-width: 800px; margin: 0 auto; background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
        .header { background: #4f46e5; color: white; padding: 30px; text-align: center; }
        .header h1 { font-size: 2rem; margin-bottom: 10px; }
        .main-content { padding: 20px; }
        textarea { width: 100%; height: 120px; padding: 15px; border: 2px solid #e2e8f0; border-radius: 10px; font-size: 16px; margin: 10px 0; }
        .button-group { display: flex; gap: 10px; margin: 15px 0; flex-wrap: wrap; }
        button { padding: 12px 20px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; }
        .simplify-btn { background: #10b981; color: white; }
        .mcq-btn { background: #f59e0b; color: white; }
        .output-box { background: #f8fafc; border: 2px solid #e2e8f0; border-radius: 10px; padding: 15px; min-height: 150px; margin-top: 15px; }
        .loading { display: none; text-align: center; padding: 15px; color: #4f46e5; }
        .api-key-section { background: #f1f5f9; padding: 15px; border-radius: 10px; margin: 15px 0; }
        .api-key-section input { width: 100%; padding: 10px; border: 2px solid #cbd5e1; border-radius: 5px; margin-top: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ЁЯУЪ рк╕рлНркЯрлБркбрлЗркирлНркЯ рк╕рк╛ркерлА</h1>
            <p>AI рккрк╛рк╡рк░ркерлА ркдркорк╛рк░рлА ркирлЛркВркзрлЛ рк╕рк░рк│ ркмркирк╛рк╡рлЛ</p>
        </div>

        <div class="main-content">
            <div class="input-section">
                <h3>ркдркорк╛рк░рлА ркирлЛркВркзрлЛ ркЕрк╣рлАркВ рккрлЗрк╕рлНркЯ ркХрк░рлЛ:</h3>
                <textarea id="notesInput" placeholder="ркЙркжрк╛рк╣рк░ркг: рккрлНрк░ркХрк╛рк╢ рк╕ркВрк╢рлНрк▓рлЗрк╖ркг ркП рккрлНрк░ркХрлНрк░рк┐ркпрк╛ ркЫрлЗ ркЬрлЗркорк╛ркВ ркЫрлЛркб рк╕рлВрк░рлНркпрккрлНрк░ркХрк╛рк╢ркирлА ркКрк░рлНркЬрк╛ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЗ ркЫрлЗ..."></textarea>
                
                <div class="button-group">
                    <button class="simplify-btn" onclick="simplifyNotes()">ЁЯОп ркирлЛркВркзрлЛ рк╕рк░рк│ ркХрк░рлЛ</button>
                    <button class="mcq-btn" onclick="generateMCQs()">тЭУ MCQ рккрлНрк░рк╢рлНркирлЛ ркмркирк╛рк╡рлЛ</button>
                </div>
            </div>

            <div class="api-key-section">
                <h3>ЁЯФС ркдркорк╛рк░рлЛ OpenAI API Key:</h3>
                <input type="password" id="apiKey" placeholder="sk-... (https://platform.openai.com/api-keys рккрк░ркерлА ркорлЗрк│рк╡рлЛ)">
            </div>

            <div class="loading" id="loading">
                <h3>тЪб AI ркХрк╛рко ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...</h3>
            </div>

            <div class="output-section">
                <h3>ЁЯУЛ рккрк░рк┐ркгрк╛рко:</h3>
                <div class="output-box" id="output">
                    ркдркорк╛рк░рлА рк╕рк░рк│ ркирлЛркВркзрлЛ ркЕркерк╡рк╛ MCQ рккрлНрк░рк╢рлНркирлЛ ркЕрк╣рлАркВ ркжрлЗркЦрк╛рк╢рлЗ...
                </div>
            </div>
        </div>
    </div>

    <script>
        async function simplifyNotes() {
            const notes = document.getElementById('notesInput').value;
            const apiKey = document.getElementById('apiKey').value;
            const output = document.getElementById('output');
            const loading = document.getElementById('loading');

            if (!notes) {
                output.innerHTML = "тЭМ ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккрк╣рлЗрк▓рк╛ ркирлЛркВркзрлЛ ркжрк╛ркЦрк▓ ркХрк░рлЛ!";
                return;
            }

            if (!apiKey) {
                output.innerHTML = "тЭМ ркХрлГрккрк╛ ркХрк░рлАркирлЗ API Key ркжрк╛ркЦрк▓ ркХрк░рлЛ!";
                return;
            }

            loading.style.display = 'block';
            output.innerHTML = '';

            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: "gpt-3.5-turbo",
                        messages: [
                            {
                                role: "system",
                                content: "ркдркорлЗ ркПркХ ркЕркирлБркнрк╡рлА рк╢рк┐ркХрлНрк╖ркХ ркЫрлЛ ркЬрлЗ ркЬркЯрк┐рк▓ рк╡рк┐рк╖ркпрлЛркирлЗ рк╕рк░рк│ рк╣рк┐ркирлНркжрлАркорк╛ркВ рк╕ркоркЬрк╛рк╡рлЗ ркЫрлЗ."
                            },
                            {
                                role: "user",
                                content: `ркирлАркЪрлЗркирлА ркЯрлЗркХрлНрк╕рлНркЯркирлЗ рк╕рк░рк│ рк╣рк┐ркирлНркжрлАркорк╛ркВ рк╕ркоркЬрк╛рк╡рлЛ:\n\n${notes}`
                            }
                        ],
                        max_tokens: 1000
                    })
                });

                const data = await response.json();
                if (data.error) {
                    output.innerHTML = `тЭМ ркдрлНрк░рлБркЯрк┐: ${data.error.message}`;
                } else {
                    output.innerHTML = data.choices[0].message.content;
                }
            } catch (error) {
                output.innerHTML = `тЭМ ркирлЗркЯрк╡рк░рлНркХ ркдрлНрк░рлБркЯрк┐: ${error.message}`;
            } finally {
                loading.style.display = 'none';
            }
        }

        async function generateMCQs() {
            const notes = document.getElementById('notesInput').value;
            const apiKey = document.getElementById('apiKey').value;
            const output = document.getElementById('output');
            const loading = document.getElementById('loading');

            if (!notes) {
                output.innerHTML = "тЭМ ркХрлГрккрк╛ ркХрк░рлАркирлЗ рккрк╣рлЗрк▓рк╛ ркирлЛркВркзрлЛ ркжрк╛ркЦрк▓ ркХрк░рлЛ!";
                return;
            }

            if (!apiKey) {
                output.innerHTML = "тЭМ ркХрлГрккрк╛ ркХрк░рлАркирлЗ API Key ркжрк╛ркЦрк▓ ркХрк░рлЛ!";
                return;
            }

            loading.style.display = 'block';
            output.innerHTML = '';

            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: "gpt-3.5-turbo",
                        messages: [
                            {
                                role: "system",
                                content: "ркдркорлЗ рккрк░рлАркХрлНрк╖рк╛ ркирк┐рк╖рлНркгрк╛ркд ркЫрлЛ ркЬрлЗ ркЙркЪрлНркЪ-ркЧрлБркгрк╡ркдрлНркдрк╛ркирк╛ MCQ рккрлНрк░рк╢рлНркирлЛ ркмркирк╛рк╡рлЗ ркЫрлЗ."
                            },
                            {
                                role: "user",
                                content: `ркирлАркЪрлЗркирлА ркЯрлЗркХрлНрк╕рлНркЯркорк╛ркВркерлА 3 MCQ рккрлНрк░рк╢рлНркирлЛ ркмркирк╛рк╡рлЛ:\n\n${notes}`
                            }
                        ],
                        max_tokens: 1500
                    })
                });

                const data = await response.json();
                if (data.error) {
                    output.innerHTML = `тЭМ ркдрлНрк░рлБркЯрк┐: ${data.error.message}`;
                } else {
                    output.innerHTML = data.choices[0].message.content;
                }
            } catch (error) {
                output.innerHTML = `тЭМ ркирлЗркЯрк╡рк░рлНркХ ркдрлНрк░рлБркЯрк┐: ${error.message}`;
            } finally {
                loading.style.display = 'none';
            }
        }
    </script>
</body>
</html>
